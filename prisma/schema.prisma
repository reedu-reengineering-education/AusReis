// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id        String      @id @default(cuid())
  name      String
  path      String
  createdAt DateTime @default(now())
}
model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String?                @unique
  password          String
  emailVerified     DateTime?             
  image             String?
  role      Role     @default(USER) 
  projects  Project[] @relation("UserProjects")
  accounts          Account[]
  sessions          Session[]



  Expense Expense[]
}


model Project {
  id           String        @id @default(cuid())
  name         String
  status       ProjectStatus @default(PENDING) // Status f체r das Projekt
  budget       Float         // Neues Budget-Feld hinzugef체gt
  actualSpend  Float         @default(0) // Neues Feld f체r tats채chliche Ausgaben mit Standardwert 0
  users        User[]        @relation("UserProjects")
  createdAt    DateTime      @default(now())
  Expense      Expense[]
}

enum ProjectStatus {
  ACTIVE
  PENDING
  COMPLETED
}

enum Role {
  USER
  ADMIN
}


model Session {
  id           String      @id @default(cuid())
  sessionToken String   @unique 
  userId       String           
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}

model Account {
  id                String     @id @default(cuid())
  userId            String    
  type              String
  provider          String
  providerAccountId String   
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

}

model Expense {
  id        String   @id @default(cuid())
  amount    Float
  description String
  status    ExpenseStatus @default(PENDING)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum ExpenseStatus {
  PENDING
  PROCESSED
  PAID
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 
}
