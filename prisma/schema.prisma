// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id        String   @id @default(cuid())
  name      String
  path      String
  createdAt DateTime @default(now())
  bill      Bill?    @relation(fields: [billId], references: [id])
  billId    String?
}



model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  password          String
  emailVerified     DateTime?             
  image             String?
  role              Role       @default(user) 
  projects          Project[]  @relation("UserProjects")
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @updatedAt 
  expenses          Expense[]
}


enum Role {
  user
  admin
}

model Project {
  id           String        @id @default(cuid())
  name         String
  status       ProjectStatus @default(pending)
  budget       Float
  actualSpend  Float         @default(0)
  users        User[]        @relation("UserProjects")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt // Optional, um die Migration durchzuf√ºhren
  Expense      Expense[]
}


enum ProjectStatus {
  active
  pending
  completed
  archived
}



model Session {
  id           String      @id @default(cuid())
  sessionToken String   @unique 
  userId       String           
  expires      DateTime
  role         Role    @default(user)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}

model Account {
  id                String     @id @default(cuid())
  userId            String    
  type              String
  provider          String
  providerAccountId String   
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

}

model Expense {
  id          String          @id @default(cuid())
  amount      Float
  description String
  status      ExpenseStatus   @default(pending)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  category    ExpenseCategory
  bills       Bill[]          
}

enum ExpenseStatus {
  pending
  processed
  paid
}


enum ExpenseCategory {
  travel
  reimbursement
}


model Bill {
  id        String   @id @default(cuid())
  file      String
  amount    Float
  expenseId String
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  File File[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 
}
